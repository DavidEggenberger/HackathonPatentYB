@inject HttpClient httpClient

<div class="container">
    <div class="UserInfoComponentContainer">

    </div>
    <div class="diagramContainer">
        <CascadingValue Value="diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div> 
</div>

@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }

    private Diagram diagram = new Diagram();
    private ApplicationUserDTO currentUserDTO = new ApplicationUserDTO();
    private List<ApplicationUserDTO> applicationUserDTOs = new List<ApplicationUserDTO>();
    private List<EnergyRessourceDTO> energyRessourceDTOs = new List<EnergyRessourceDTO>();

    protected override async Task OnInitializedAsync()
    {
        await GetData();

        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        diagram.Links.Added += b =>
        {
            b.TargetPortChanged += (bt, old, niw) =>
            {
                ((UserNode)bt.SourcePort.Parent).ConsumeRessource(((EnergyRessourceNode)bt.TargetPort.Parent).Ressource);
                StateHasChanged();
            };
        };
        diagram.RegisterModelComponent<EnergyRessourceNode, EnergyRessourceNodeComponent>();
        diagram.RegisterModelComponent<UserNode, UserNodeComponent>();

        foreach (var ressource in energyRessourceDTOs)
        {
            Random rnd = new Random();
            diagram.Nodes.Add(new EnergyRessourceNode());
        }

        diagram.Nodes.Add(new UserNode(httpClient) { ApplicationUser = currentUserDTO });

        HubConnection.On("Update", async () =>
        {
            await GetData();
        });
    }
    public async Task GetData()
    {
        currentUserDTO = await httpClient.GetFromJsonAsync<ApplicationUserDTO>("/api/applicationUser");
        applicationUserDTOs = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>("/api/applicationUser/all");
        energyRessourceDTOs = await httpClient.GetFromJsonAsync<List<EnergyRessourceDTO>>("/api/energyRessource/allOffers");
    }
}
